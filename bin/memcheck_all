#!/bin/sh -f
# **************************************************************************
#  Tool Gear (www.llnl.gov/CASC/tool_gear)
#  Version 2.02                                                 Sept 8, 2006
#  Please see COPYRIGHT AND LICENSE information at the end of this file.
# **************************************************************************
# -----------------------------------------------------------------------
# memcheck_all: Runs the Valgrind Memcheck tool on all MPI processes with xml
#               output, better output file names, and MPI wrappers
#               Currently assumes SLURM is used as parallel app launcher
#
# To modify memcheck_all to work with a different parallel launcher,
# you need to set MY_RANK with the environment variable holding the
# MPI rank of each task and MY_JOBID to something identifying"
# the parallel run (ideally a job id), and MPIRUN_SYNTAX and
# MPIRUN_EXAMPLE to show how to launch parallel jobs.
#
# Initial memcheck_all script written by John C. Gyllenhaal at LLNL 1/7/05
# Incorporated Julian Seward's valgrind option suggestions 1/11/05
# Significantly enhanced by John C. Gyllenhaal at LLNL 3/27/06
# Please send questions or recommendations to gyllen@llnl.gov.
# -----------------------------------------------------------------------

# Specify the install location for toolgear, if not specified in environment
if [ "$TGROOT" = "" ]; then
    TGROOT="/g/g0/gyllen/svn/toolgear"
else
    echo "Warning: Using Tool Gear built in '$TGROOT'"
fi

# Specify the valgrind version to use (must be 3.1.0 or later for xml support)
#VALGRIND_EXE="/usr/local/tools/valgrind/3.2.0/bin/valgrind"
VALGRIND_EXE="valgrind"

# Valgind now provides MPI wrappers (beta 3/19/06) which greatly reduces 
# false positives in MPI codes.   Specify the wrapper library location 
# which will be preloaded before executing the executable.
# First official Valrind release with MPI wrappers is 3.2.0
#MPI_WRAPPER="/usr/local/tools/valgrind/3.2.0/auxprogs/libmpiwrap.so"
MPI_WRAPPER=""

# Specify MPI suppression file (most MPI implementations generate warnings that
# the user cannot do anything about, so filter them out)
MEMCHECK_SUPPRESSION="${TGROOT}/bin/mpi_suppression" 

# Additional optional valgrind options turned on by default
# Required valgrind options are below in the invocation command
VALGRIND_OPTIONS="-v --workaround-gcc296-bugs=yes --error-limit=no --leak-check=full --show-reachable=yes"

# For usage examples, what is the syntax of the mpirun, srun, etc. command
MPIRUN_SYNTAX="srun [srun options]"

# Also for usage examples, give sample run parameters for an interactive
# debug launch of an MPI program
MPIRUN_EXAMPLE="srun -ppdebug -N2 -n4"

# Get the valgrind version
VALGRIND_VERSION=`${VALGRIND_EXE} --version`
if [ $? != 0 ]; then
    VALGRIND_VERSION="(Unable to get valgrind version)"
fi

# Print usage
if [ $# -le 0 ]; then
   echo "Usage: ${MPIRUN_SYNTAX} memcheck_all [extra-valgrind-args] command [args]";
   echo " "
   echo "  Runs Valgrind's memory debug tool 'memcheck' on all MPI tasks"
   echo "  E.g., '${MPIRUN_EXAMPLE} memcheck_all testmpi'"
   echo " "
   echo "  Creates file executable_name.jobid.#.mc for each MPI task #."
   echo " "
   echo "  Use 'memcheckview' to view the .mc files produced or that are being produced"
   echo "  (e.g., memcheckview testmpi.23456.0.mc)."
   echo " "
   echo "  To get text output (instead of xml), add '--xml=no' after memcheck_all"
   echo " "
   echo "  Valgrind Path:  $VALGRIND_EXE"
   echo "        Version:  $VALGRIND_VERSION"
   echo "    MPI Wrapper:  $MPI_WRAPPER"
   echo "    Filter file:  $MEMCHECK_SUPPRESSION"
   echo "   Base Options:  $VALGRIND_OPTIONS"
   echo " "
   echo "  Valgrind documentation, downloads, etc. can be found at valgrind.org"
   echo " "
   echo "  Memcheck_all's user guide can be found at www.llnl.gov/computing/memcheck"
   echo "  Memcheck_all (script) is part of Tool Gear 2.02 (www.llnl.gov/CASC/tool_gear)"
   echo " "
   echo "  Please direct questions, bug reports, and feedback on memcheck_all"
   echo "  to either John Gyllenhaal (gyllen@llnl.gov) or John May (johnmay@llnl.gov)"
   exit 1;
fi

# Catch common user error, forgetting to put srun/mpirun before memcheck_all.
# Also, get MPI environments RANK variable and put in MY_RANK so can
# support multiple MPI runtimes

# Get RANK variable for Quadrics elan3, if defined
if [ "$RMS_RANK" != "" ];  then
  MY_RANK="${RMS_RANK}";

# Get RANK variable for MPIRUN based systems, if defined
elif [ "${MPIRUN_RANK}" != "" ];  then
  MY_RANK="${MPIRUN_RANK}";

else
   echo "Error: MPI RANK environment variable not set (RMS_RANK or MPIRUN_RANK)!"
   echo "Usage: ${MPIRUN_SYNTAX} memcheck_all [extra-valgrind-args] command [args]";
   echo "(Run memcheck_all with no arguments for more usage info.)"
   exit 1;
fi

# Get a job id, may need to enhance for other systems
if [ "$SLURM_JOBID" != "" ]; then
    MY_JOBID="${SLURM_JOBID}";
else
   echo "Error: MPI JOBID environment variable not set (SLURM_JOBID)!"
   echo "Usage: ${MPIRUN_SYNTAX} memcheck_all [extra-valgrind-args] command [args]";
   echo "(Run memcheck_all with no arguments for more usage info.)"
   exit 1;
fi

# Assume first argument that doesn't start with - is executable name
EXE_NAME=""
for MYARG in "$@"
do
    if [ "$EXE_NAME" = "" ]; then
	case "$MYARG" in
           -*)
             IGNORE_OPTION=1;;
           *)
             # Use basename to get executable name without path
             EXE_NAME=`basename $MYARG`;
             break;;
        esac
    fi
done

# Make sure we found a executable name
if [ "$EXE_NAME" = "" ]; then
   echo " "
   echo "Error: Unable to find executable name in:"
   echo "      '$@'"
   echo "      Expect at least one argument that doesn't start with '-'"
   echo "Usage: ${MPIRUN_SYNTAX} memcheck_all [extra-valgrind-args] command [args]";
   echo "(Run memcheck_all with no arguments for more usage info.)"
   exit 1;
fi

# Pass in extra info into valgrind for display, like hostname, start date,
# and MPI rank (if in parallel)
MY_XML_COMMENTS=""

# Get short hostname and pass as comment to valgrind
MY_HOSTNAME=`hostname -s`
MY_XML_COMMENTS="${MY_XML_COMMENTS}<hostname>${MY_HOSTNAME}</hostname>"

# Get start date and time and pass as comment to valgrind
MY_START_DATE=`date`
MY_XML_COMMENTS="${MY_XML_COMMENTS}<date>${MY_START_DATE}</date>"

# Pass MPI rank to valgrind as comment
MY_XML_COMMENTS="${MY_XML_COMMENTS}<rank>${MY_RANK}</rank>"

# Let user know what is happening
echo "Running ${VALGRIND_VERSION} Memcheck on task $MY_RANK on $MY_HOSTNAME:"
echo "  Use 'memcheckview ${EXE_NAME}.${MY_JOBID}.${MY_RANK}.mc' to start GUI on task $MY_RANK output"

# If have MPI_WRAPPER specified, preload it
if [ "$MPI_WRAPPER" != "" ]; then
    # Make sure it exists (otherwise will get a lot of false positives
    if [ ! -f "$MPI_WRAPPER" ]; then
	echo "Error: memcheck_all unable to find mpi wrapper library:"
	echo "       $MPI_WRAPPER"
        exit 1;
    fi
    
    # If LD_PRELOAD not defined, define it
    if [ "$LD_PRELOAD" = "" ]; then
       export LD_PRELOAD=${MPI_WRAPPER}

    # Otherwise, prepend mpi wrapper
    else
       export LD_PRELOAD=${MPI_WRAPPER}:${LD_PRELOAD}
    fi

    # Suppress messages for MPI wrappers for now 
    export MPIWRAP_DEBUG=quiet

    # Adding ',warn' to MPIWRAP_DEBUG will print out warning for each
    # PMPI_ call not wrapped.   Don't do by default and do only for
    # RANK 0 to minimize noise.
    if [ "${MY_RANK}" -eq "0" ]; then
       BOGUS_SO_CAN_COMMENT_LINE_OUT_BELOW=
#       export MPIWRAP_DEBUG=${MPIWRAP_DEBUG},warn
    fi
fi

# Run Valgrind Memcheck on code
${VALGRIND_EXE} --tool=memcheck --xml=yes --log-file-exactly=${EXE_NAME}.${MY_JOBID}.${MY_RANK}.mc --suppressions=${MEMCHECK_SUPPRESSION} ${VALGRIND_OPTIONS} "--xml-user-comment=${MY_XML_COMMENTS}" "$@"
exit $?;
################################################################################
# COPYRIGHT AND LICENSE
# 
# Copyright (c) 2006, The Regents of the University of California.
# Produced at the Lawrence Livermore National Laboratory
# Written by John Gyllenhaal (gyllen@llnl.gov), John May (johnmay@llnl.gov),
# and Martin Schulz (schulz6@llnl.gov).
# UCRL-CODE-220834.
# All rights reserved.
# 
# This file is part of Tool Gear.  For details, see www.llnl.gov/CASC/tool_gear.
# 
# Redistribution and use in source and binary forms, with or
# without modification, are permitted provided that the following
# conditions are met:
# 
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the disclaimer below.
# 
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the disclaimer (as noted below) in
#   the documentation and/or other materials provided with the distribution.
# 
# * Neither the name of the UC/LLNL nor the names of its contributors may
#   be used to endorse or promote products derived from this software without
#   specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OF THE UNIVERSITY 
# OF CALIFORNIA, THE U.S. DEPARTMENT OF ENERGY OR CONTRIBUTORS BE LIABLE 
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR 
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# ADDITIONAL BSD NOTICE
# 
# 1. This notice is required to be provided under our contract with the 
#    U.S. Department of Energy (DOE). This work was produced at the 
#    University of California, Lawrence Livermore National Laboratory 
#    under Contract No. W-7405-ENG-48 with the DOE.
# 
# 2. Neither the United States Government nor the University of California 
#    nor any of their employees, makes any warranty, express or implied, 
#    or assumes any liability or responsibility for the accuracy, completeness,
#    or usefulness of any information, apparatus, product, or process disclosed,
#    or represents that its use would not infringe privately-owned rights.
# 
# 3. Also, reference herein to any specific commercial products, process,
#    or services by trade name, trademark, manufacturer or otherwise does not
#    necessarily constitute or imply its endorsement, recommendation, or
#    favoring by the United States Government or the University of California.
#    The views and opinions of authors expressed herein do not necessarily
#    state or reflect those of the United States Government or the University
#    of California, and shall not be used for advertising or product
#    endorsement purposes.
################################################################################

